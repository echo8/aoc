package com.echo8.aoc2020;

import org.apache.commons.lang3.StringUtils;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Day14Part2 {
    private static final String INPUT = "mask = 0010011010X1000100X101011X10010X1010\n" +
            "mem[57319] = 8001842\n" +
            "mem[29943] = 1246\n" +
            "mem[3087] = 1055661079\n" +
            "mask = 0110010X0XXX001100111000X01XX101010X\n" +
            "mem[52073] = 42874573\n" +
            "mem[58090] = 125580\n" +
            "mem[56527] = 55839\n" +
            "mem[6576] = 6674834\n" +
            "mask = 1X100010101110001X1111011X001100X010\n" +
            "mem[688] = 288\n" +
            "mem[6462] = 467\n" +
            "mask = 1X100XX01011100X1X1110X11000111XX0X0\n" +
            "mem[4544] = 38913\n" +
            "mem[19739] = 27209989\n" +
            "mem[62629] = 29599367\n" +
            "mem[59303] = 56895590\n" +
            "mem[33209] = 99475224\n" +
            "mem[21064] = 2217881\n" +
            "mask = 00100101101X0011X0X1001X000011110X11\n" +
            "mem[59134] = 1621\n" +
            "mem[9901] = 3962186\n" +
            "mem[23399] = 15337615\n" +
            "mask = 00100100X00000X01011X0X1101X0XXX1011\n" +
            "mem[8460] = 62218793\n" +
            "mem[8888] = 6132600\n" +
            "mem[6738] = 81932640\n" +
            "mem[15913] = 937\n" +
            "mem[95] = 237\n" +
            "mem[65076] = 1887\n" +
            "mem[46066] = 267972\n" +
            "mask = 0010010110X11X101X1101X11X1001000001\n" +
            "mem[3111] = 757262\n" +
            "mem[18053] = 14564\n" +
            "mem[29590] = 84022571\n" +
            "mask = 0X100101X01100X1001XXX0X010010011001\n" +
            "mem[21123] = 50334\n" +
            "mem[14185] = 1548248\n" +
            "mem[19142] = 69122\n" +
            "mem[64375] = 311754222\n" +
            "mask = 00010100X001001011X00000011X001X11X0\n" +
            "mem[37483] = 1031\n" +
            "mem[9051] = 7137857\n" +
            "mem[1514] = 2951\n" +
            "mem[65519] = 3840\n" +
            "mem[2437] = 1853463\n" +
            "mem[1533] = 121088\n" +
            "mem[16607] = 404683\n" +
            "mask = 00X001X01001X0X110X1000000100X0111X1\n" +
            "mem[43309] = 53816426\n" +
            "mem[54492] = 8989842\n" +
            "mem[6603] = 109918\n" +
            "mask = 0010010X10X0000010110101011100XX0111\n" +
            "mem[50262] = 518\n" +
            "mem[19739] = 64862904\n" +
            "mem[59938] = 1898392\n" +
            "mem[10940] = 36316297\n" +
            "mask = X010X10X101110011X1XX01XX01011110110\n" +
            "mem[51493] = 94841150\n" +
            "mem[23379] = 66315661\n" +
            "mem[50538] = 6370026\n" +
            "mem[20576] = 3105\n" +
            "mem[524] = 704\n" +
            "mem[9470] = 572991\n" +
            "mask = 000001001011100000XXX1X1010000101100\n" +
            "mem[7193] = 373916\n" +
            "mem[8235] = 772308\n" +
            "mem[12693] = 1931\n" +
            "mask = 0010010110X1011XX01001X010X011110000\n" +
            "mem[53866] = 29908037\n" +
            "mem[10876] = 36809\n" +
            "mem[23306] = 1494967\n" +
            "mask = X100X1X1101101X010100X0X000111111010\n" +
            "mem[2279] = 25754\n" +
            "mem[9932] = 27669\n" +
            "mem[47170] = 228719\n" +
            "mem[6716] = 1055009534\n" +
            "mask = 0000011010X1X000001X010011X0X0110111\n" +
            "mem[17003] = 3981363\n" +
            "mem[51032] = 3041968\n" +
            "mem[6835] = 1135337\n" +
            "mem[49175] = 34584\n" +
            "mem[53149] = 390954848\n" +
            "mem[46857] = 295459\n" +
            "mem[7176] = 74749\n" +
            "mask = X0100101101110XX1011X10111X000000101\n" +
            "mem[20071] = 157\n" +
            "mem[58690] = 23548755\n" +
            "mem[6693] = 31361\n" +
            "mem[29590] = 12352795\n" +
            "mem[16195] = 167714437\n" +
            "mask = 1010111000X1110111111X0000X1110X1110\n" +
            "mem[52261] = 1766\n" +
            "mem[4528] = 29538045\n" +
            "mem[3516] = 434\n" +
            "mem[38224] = 8600086\n" +
            "mem[42025] = 979\n" +
            "mask = 00X001X110110X1100X1XX0101100101X1X0\n" +
            "mem[24095] = 558277\n" +
            "mem[30451] = 823594660\n" +
            "mem[32920] = 323822302\n" +
            "mask = 01000101101X01001X1001X0X011111XX11X\n" +
            "mem[36330] = 9326\n" +
            "mem[34800] = 1457445\n" +
            "mem[6373] = 17674577\n" +
            "mem[3467] = 28430\n" +
            "mem[3725] = 873\n" +
            "mem[23356] = 4092\n" +
            "mask = X010111X000110011X01101110X1000110X1\n" +
            "mem[64745] = 861\n" +
            "mem[62629] = 90934\n" +
            "mem[47573] = 19952\n" +
            "mask = 001001XX10110XXXX01X00011010X1011111\n" +
            "mem[19591] = 82244\n" +
            "mem[25842] = 62986578\n" +
            "mem[8674] = 4524\n" +
            "mem[6754] = 45567\n" +
            "mem[12321] = 482\n" +
            "mask = 00010000X0X1100X00100000000101X11101\n" +
            "mem[22843] = 23521440\n" +
            "mem[59262] = 89078\n" +
            "mem[14388] = 13582\n" +
            "mem[8783] = 803481646\n" +
            "mem[14301] = 129344\n" +
            "mem[5993] = 1676992\n" +
            "mask = 011X0X0X0X11001100111XXX00101100011X\n" +
            "mem[21656] = 1452\n" +
            "mem[5972] = 7553794\n" +
            "mem[14786] = 10451\n" +
            "mask = 00X0X11X101X0001101001111X1000011X00\n" +
            "mem[7791] = 1156045\n" +
            "mem[49175] = 1797840\n" +
            "mem[52303] = 1002008464\n" +
            "mask = 00000X00X0X110X0000000000101X101X01X\n" +
            "mem[54277] = 40348\n" +
            "mem[41844] = 75483466\n" +
            "mem[31687] = 209232793\n" +
            "mem[59303] = 147780\n" +
            "mask = 01100101X0X10XX100111X00001011011110\n" +
            "mem[1674] = 212290004\n" +
            "mem[26705] = 154696825\n" +
            "mask = 00100X1010110X00001X0X111XX1X11XX101\n" +
            "mem[55681] = 15384\n" +
            "mem[8731] = 20029618\n" +
            "mem[17196] = 1416285\n" +
            "mem[8939] = 230194\n" +
            "mem[41925] = 59500490\n" +
            "mask = 001X01111X1XX0100001110010X001XX0011\n" +
            "mem[4136] = 43037307\n" +
            "mem[50432] = 47363915\n" +
            "mask = X0100100101XX1X110X00111111001X11110\n" +
            "mem[26775] = 15795\n" +
            "mem[61416] = 336820014\n" +
            "mem[24473] = 15435\n" +
            "mem[7316] = 507\n" +
            "mem[22980] = 69499\n" +
            "mem[13539] = 46705434\n" +
            "mask = 0010XX1110X101010010X00100X001111111\n" +
            "mem[24797] = 48493\n" +
            "mem[9976] = 191947\n" +
            "mem[59649] = 182\n" +
            "mem[6746] = 293718\n" +
            "mem[13657] = 22047\n" +
            "mem[18870] = 917196392\n" +
            "mask = 0010011110X100101011001110X1X1X01111\n" +
            "mem[42060] = 3151\n" +
            "mem[10876] = 14534\n" +
            "mem[15913] = 3956260\n" +
            "mem[25587] = 159376\n" +
            "mem[32389] = 1637604\n" +
            "mask = 00X0010X1011001010X0000X0X1001010101\n" +
            "mem[47397] = 1027668\n" +
            "mem[1387] = 63624\n" +
            "mem[29590] = 468836\n" +
            "mem[30511] = 515\n" +
            "mem[29943] = 160340\n" +
            "mem[2723] = 3803815\n" +
            "mask = 0010X100X0X1X10010100001011001011111\n" +
            "mem[19103] = 37077352\n" +
            "mem[61704] = 1585\n" +
            "mem[41739] = 55291\n" +
            "mem[32874] = 13348645\n" +
            "mask = 00001X00100X001101111110XX1001X00100\n" +
            "mem[46960] = 167728\n" +
            "mem[21575] = 137775190\n" +
            "mem[39462] = 138444\n" +
            "mask = 101X01X01XX00X101011100100X000000100\n" +
            "mem[13982] = 11278\n" +
            "mem[46054] = 1566730\n" +
            "mem[62449] = 3637\n" +
            "mem[34329] = 715394\n" +
            "mem[42404] = 16695924\n" +
            "mask = 00100X111011001X000100000100X1000X00\n" +
            "mem[2279] = 840\n" +
            "mem[26696] = 296821\n" +
            "mem[51587] = 564647\n" +
            "mem[11937] = 1079\n" +
            "mem[22100] = 1236\n" +
            "mask = 1001X1111011010XX01XX0000010X1011010\n" +
            "mem[57157] = 14498\n" +
            "mem[23458] = 655\n" +
            "mem[64273] = 23918\n" +
            "mem[597] = 11056777\n" +
            "mem[7236] = 223322653\n" +
            "mem[548] = 21543\n" +
            "mask = 10101100XX1110X1111X01101X01110100XX\n" +
            "mem[29908] = 102485547\n" +
            "mem[55145] = 39744\n" +
            "mem[25388] = 86457344\n" +
            "mem[29024] = 8019640\n" +
            "mask = 0010010110100011101101X0X0XX100X0011\n" +
            "mem[16691] = 11547863\n" +
            "mem[18035] = 8789\n" +
            "mem[17394] = 6550826\n" +
            "mask = 000XX1001001001XXX1X1001011XX1100110\n" +
            "mem[33597] = 40949\n" +
            "mem[31065] = 115749466\n" +
            "mem[43929] = 32103\n" +
            "mem[62821] = 2824401\n" +
            "mask = X01X0X0010111001101100111X0XXX101X0X\n" +
            "mem[40077] = 250970300\n" +
            "mem[8235] = 5176\n" +
            "mem[35379] = 967230664\n" +
            "mem[50827] = 1594\n" +
            "mask = X0X0010X1011XX101010000100101011XX10\n" +
            "mem[43601] = 13382723\n" +
            "mem[6907] = 112589660\n" +
            "mem[22980] = 3002394\n" +
            "mem[59198] = 2452391\n" +
            "mask = 00100110X01110011011110XX0001010XX00\n" +
            "mem[21349] = 2720367\n" +
            "mem[52060] = 251432\n" +
            "mask = 1X10010110111X01XX1101111X0111X11110\n" +
            "mem[15848] = 129775\n" +
            "mem[26474] = 1601\n" +
            "mem[62050] = 2929\n" +
            "mask = 00X0X10010110X101X1011X0X010X1X1011X\n" +
            "mem[12738] = 209893\n" +
            "mem[39127] = 691\n" +
            "mem[37474] = 6593\n" +
            "mask = 0X000X001011100000X000XX00XXX0111100\n" +
            "mem[96] = 771\n" +
            "mem[22577] = 12395804\n" +
            "mem[11733] = 14929\n" +
            "mem[39189] = 16420782\n" +
            "mem[38122] = 344179\n" +
            "mem[24473] = 29413\n" +
            "mem[62361] = 7509824\n" +
            "mask = 0000110010X10X1011101111XX1001000011\n" +
            "mem[57383] = 18264183\n" +
            "mem[49173] = 1002256\n" +
            "mem[40502] = 1730\n" +
            "mask = 0000X110101100010110X100X000X01X1001\n" +
            "mem[46811] = 623\n" +
            "mem[17254] = 15990\n" +
            "mem[22843] = 142075978\n" +
            "mem[20042] = 1298592\n" +
            "mask = 00X0X10010X100101X10X0X1000X01010110\n" +
            "mem[28039] = 0\n" +
            "mem[38987] = 5698\n" +
            "mem[4667] = 456552228\n" +
            "mem[59938] = 113841\n" +
            "mem[1661] = 239194935\n" +
            "mask = 0010X100101X100000X0000110XX00X00101\n" +
            "mem[25449] = 879\n" +
            "mem[11100] = 174\n" +
            "mem[22577] = 2923861\n" +
            "mem[31106] = 4012\n" +
            "mask = 0010X110001X1X011X11X00X1001X110X0X0\n" +
            "mem[18863] = 6313\n" +
            "mem[14786] = 4007\n" +
            "mem[21058] = 132219\n" +
            "mask = X010010110011010X1110101001XX000010X\n" +
            "mem[47349] = 40055\n" +
            "mem[23379] = 549082\n" +
            "mask = 00000100X110X001101X101X00101111XX10\n" +
            "mem[41149] = 7477499\n" +
            "mem[23458] = 14250047\n" +
            "mem[13044] = 963453\n" +
            "mem[37458] = 111364751\n" +
            "mem[41705] = 367\n" +
            "mem[13185] = 7794590\n" +
            "mask = 0X00011110110001X01X01X111100100X11X\n" +
            "mem[28287] = 3721531\n" +
            "mem[35201] = 490106021\n" +
            "mem[28672] = 727\n" +
            "mask = X0000X01X011001100X1000101000001110X\n" +
            "mem[36421] = 2447644\n" +
            "mem[60160] = 3592\n" +
            "mask = X010010X0011000100100X100000X1001100\n" +
            "mem[6746] = 371201\n" +
            "mem[34945] = 3182236\n" +
            "mem[59562] = 15144669\n" +
            "mask = 001X010X0000001010111X1110100X001011\n" +
            "mem[4615] = 23061\n" +
            "mem[2807] = 1040968\n" +
            "mask = XX00010110110110101000011011101X10X0\n" +
            "mem[6693] = 58755\n" +
            "mem[38797] = 396674\n" +
            "mem[23126] = 87120667\n" +
            "mask = 00XX0X001011X00000100X01XX11011101XX\n" +
            "mem[14398] = 7887686\n" +
            "mem[4703] = 158831\n" +
            "mem[43300] = 8079\n" +
            "mem[10876] = 8090\n" +
            "mem[36155] = 69377162\n" +
            "mask = 00X001011011X0001X11000010100010X111\n" +
            "mem[4691] = 889\n" +
            "mem[24131] = 841\n" +
            "mem[3111] = 573\n" +
            "mem[59595] = 4190992\n" +
            "mask = 10X01X0XX011XX01101X1010010111011100\n" +
            "mem[50090] = 34393568\n" +
            "mem[40454] = 1541981\n" +
            "mask = 001001X010X1011XX01000XX001010011X11\n" +
            "mem[45518] = 64768\n" +
            "mem[7223] = 13641\n" +
            "mem[6883] = 11\n" +
            "mask = 00X001X01011000X0X10X1001X001X0X1011\n" +
            "mem[57682] = 748\n" +
            "mem[19452] = 225201389\n" +
            "mem[22103] = 536459809\n" +
            "mem[2723] = 2729176\n" +
            "mask = X010X1X1X0110010101X00X1101001101100\n" +
            "mem[8723] = 4618603\n" +
            "mem[8105] = 55076921\n" +
            "mem[56475] = 1208612\n" +
            "mem[56860] = 2130\n" +
            "mem[14848] = 121862566\n" +
            "mem[51119] = 309\n" +
            "mask = 00X001X01XXX100X1011101100100101101X\n" +
            "mem[12321] = 26106\n" +
            "mem[19863] = 252791315\n" +
            "mem[4783] = 7125184\n" +
            "mem[36097] = 4119189\n" +
            "mem[16892] = 123426339\n" +
            "mem[50749] = 3011\n" +
            "mem[40525] = 311979314\n" +
            "mask = 001001001011XX11101110X11X10000X1101\n" +
            "mem[29971] = 1079180\n" +
            "mem[3907] = 1658\n" +
            "mem[58690] = 325\n" +
            "mem[33904] = 26326\n" +
            "mem[30812] = 3221\n" +
            "mask = XX10011000X1X10X11110000X00XX1101X01\n" +
            "mem[27562] = 5188003\n" +
            "mem[53549] = 2289833\n" +
            "mem[19329] = 40507\n" +
            "mem[36937] = 10709922\n" +
            "mem[37114] = 28119277\n" +
            "mem[19704] = 152731162\n" +
            "mask = 001X01001011X0XX1011XX01X01X00011111\n" +
            "mem[13220] = 194\n" +
            "mem[8444] = 750\n" +
            "mem[34627] = 7676\n" +
            "mask = X01001101011100011X101X1XX001X110X01\n" +
            "mem[8518] = 500024\n" +
            "mem[26339] = 167720610\n" +
            "mem[35194] = 8020476\n" +
            "mem[31306] = 650\n" +
            "mem[36208] = 2498533\n" +
            "mem[7829] = 2084\n" +
            "mask = X1000100X01110000X10101X1X11X0X0010X\n" +
            "mem[2969] = 47624\n" +
            "mem[36421] = 271067027\n" +
            "mem[33259] = 696258997\n" +
            "mask = 00100100101100X0X011011000X1X0X1X101\n" +
            "mem[52073] = 183\n" +
            "mem[4886] = 2607677\n" +
            "mem[29415] = 11034\n" +
            "mem[34596] = 1435127\n" +
            "mem[37722] = 439646\n" +
            "mask = 0010X10010111000X01X101X001010110111\n" +
            "mem[1533] = 20975777\n" +
            "mem[41149] = 43835328\n" +
            "mem[54648] = 8048387\n" +
            "mem[46044] = 191520012\n" +
            "mem[10958] = 153\n" +
            "mask = X01001XXX0110X0X00100010100010X011X1\n" +
            "mem[20181] = 271\n" +
            "mem[32998] = 406408\n" +
            "mem[14963] = 36347\n" +
            "mask = 000X00001X0X10011011000100010111X001\n" +
            "mem[8646] = 146616149\n" +
            "mem[33187] = 3502\n" +
            "mem[56643] = 2297683\n" +
            "mem[5056] = 11233\n" +
            "mem[53643] = 15785\n" +
            "mask = 00000100101X0010X0100X0010100X010001\n" +
            "mem[37722] = 36801767\n" +
            "mem[24131] = 657\n" +
            "mem[1661] = 33183928\n" +
            "mem[39578] = 31365\n" +
            "mem[2279] = 463157769\n" +
            "mem[13178] = 653666\n" +
            "mask = X0XX01000X000010101X0001X00X0010X001\n" +
            "mem[53899] = 49721\n" +
            "mem[11818] = 1726316\n" +
            "mask = 11X0XX1X1X11100X101100X000010X101000\n" +
            "mem[32088] = 373702\n" +
            "mem[2157] = 280921\n" +
            "mem[19218] = 181313\n" +
            "mem[48557] = 81701\n" +
            "mem[772] = 23956\n" +
            "mem[6957] = 2202\n" +
            "mask = 0010001010110000001100111X0X11000XX1\n" +
            "mem[48029] = 2744455\n" +
            "mem[51044] = 701\n" +
            "mem[47708] = 882\n" +
            "mem[14185] = 194301\n" +
            "mem[5025] = 1139014\n" +
            "mem[23787] = 1158165\n" +
            "mem[53248] = 11539\n" +
            "mask = 010011XX101101101X10X10X10X001111110\n" +
            "mem[56312] = 18794001\n" +
            "mem[23464] = 718595\n" +
            "mem[24737] = 26239\n" +
            "mem[62401] = 813\n" +
            "mem[2788] = 1565\n" +
            "mem[27597] = 837327137\n" +
            "mask = 001000101XXX0000001101101000X0XX000X\n" +
            "mem[7013] = 7376387\n" +
            "mem[19348] = 216259\n" +
            "mem[2335] = 5985\n" +
            "mask = 1000X1000X0X001X10111101XX0X10X00011\n" +
            "mem[25648] = 1586674\n" +
            "mem[1794] = 107777\n" +
            "mem[18172] = 1657\n" +
            "mem[24832] = 6783821\n" +
            "mem[57880] = 2318293\n" +
            "mem[52366] = 256454\n" +
            "mem[21027] = 762\n" +
            "mask = 00X00101X011X01100X1010101000X010010\n" +
            "mem[12321] = 406209\n" +
            "mem[36784] = 28499376\n" +
            "mem[23244] = 51197\n" +
            "mem[18719] = 9764113\n" +
            "mem[46197] = 727182769\n" +
            "mem[7765] = 306\n" +
            "mask = XX100XX0X011100X101X00001001X11010X0\n" +
            "mem[11226] = 1659513\n" +
            "mem[59446] = 2081606\n" +
            "mem[39362] = 61923258\n" +
            "mem[2279] = 30854\n" +
            "mem[23647] = 37009\n" +
            "mem[12290] = 15028301\n" +
            "mem[51742] = 429002814\n" +
            "mask = 0110X10X011100110011110X1001110X0100\n" +
            "mem[7963] = 27124\n" +
            "mem[26474] = 18578829\n" +
            "mem[58864] = 7199\n" +
            "mem[21049] = 3648981\n" +
            "mem[7599] = 674\n" +
            "mem[30944] = 3237758\n" +
            "mem[9365] = 44125\n" +
            "mask = 1110010XX01110X1101X0010100101101000\n" +
            "mem[4554] = 32428139\n" +
            "mem[23227] = 445223\n" +
            "mem[13006] = 536348\n" +
            "mem[21735] = 32459971\n" +
            "mem[18561] = 415004\n" +
            "mem[41639] = 1210\n" +
            "mask = XX0X011110110100101X0000X00X01101010\n" +
            "mem[40990] = 378560\n" +
            "mem[40502] = 4261\n" +
            "mem[3070] = 20179\n" +
            "mem[54648] = 1461025\n" +
            "mask = 10100X001X1100101X10XX0X001XX1101010\n" +
            "mem[50898] = 27841850\n" +
            "mem[38435] = 14871\n" +
            "mem[2096] = 13218483\n" +
            "mem[8731] = 46498503\n" +
            "mask = X01X0100100101110X100X0X111010X1101X\n" +
            "mem[8881] = 84348735\n" +
            "mem[27157] = 1435663\n" +
            "mem[20913] = 895\n" +
            "mem[47226] = 87319\n" +
            "mem[9496] = 4563\n" +
            "mem[53248] = 817412\n" +
            "mask = X010010010XXX0101011100101100X0010X1\n" +
            "mem[55812] = 43\n" +
            "mem[48238] = 462\n" +
            "mem[29997] = 864862\n" +
            "mem[41149] = 3867\n" +
            "mem[95] = 65388249\n" +
            "mem[47138] = 335\n" +
            "mask = 00000XXXX001100110X1XXX00010011110X1\n" +
            "mem[11109] = 332359\n" +
            "mem[1794] = 455\n" +
            "mem[21655] = 84763\n" +
            "mem[53696] = 277\n" +
            "mem[35194] = 7281\n" +
            "mem[12347] = 148564745\n" +
            "mask = X0XXX1XX0001100X100X00100001X1111001\n" +
            "mem[21885] = 327749\n" +
            "mem[19892] = 50\n" +
            "mem[7001] = 863762540\n" +
            "mem[64928] = 1325\n" +
            "mem[4136] = 102854\n" +
            "mem[26467] = 1817\n" +
            "mask = 10X0X1X0101X1111X01001101100X10X0110\n" +
            "mem[13982] = 797986\n" +
            "mem[95] = 519755\n" +
            "mem[56061] = 5524\n" +
            "mem[36193] = 9365811\n" +
            "mask = X010X1100001110X111100XX11X0011110XX\n" +
            "mem[25557] = 43206\n" +
            "mem[7223] = 425993\n" +
            "mem[16504] = 69611\n" +
            "mem[23638] = 3067\n" +
            "mem[42437] = 19122365\n" +
            "mask = 0010X1011011X00X10X111100000X1X00100\n" +
            "mem[39578] = 1682305\n" +
            "mem[28610] = 57814005\n" +
            "mem[15619] = 37566\n" +
            "mem[4919] = 9168\n" +
            "mem[36937] = 870\n" +
            "mem[56743] = 22379353\n" +
            "mask = X0100X10101X1000111110011000X1XX1X1X\n" +
            "mem[33492] = 6823\n" +
            "mem[482] = 4554\n" +
            "mem[35054] = 10840739\n" +
            "mem[19863] = 796\n" +
            "mem[31177] = 3100127\n" +
            "mem[6355] = 9672179\n" +
            "mem[53388] = 10479412\n" +
            "mask = 00XX0111XX1X001100XX00110100110X1101\n" +
            "mem[21049] = 3494057\n" +
            "mem[13566] = 32179\n" +
            "mem[47170] = 16081\n" +
            "mask = 00001100X00X00101010000100000X0X1X10\n" +
            "mem[2335] = 113671\n" +
            "mem[64370] = 1163\n" +
            "mem[19142] = 30303\n" +
            "mem[8044] = 318278042\n" +
            "mem[30347] = 13864150\n" +
            "mask = 0XX0XXX0001011011011001X100010X0X000\n" +
            "mem[12616] = 1894086\n" +
            "mem[62427] = 29002\n" +
            "mask = X010011010110000001XX001000XX0000101\n" +
            "mem[43617] = 84114\n" +
            "mem[37229] = 58103";

    private static final String INPUT2 = "mask = 000000000000000000000000000000X1001X\n" +
            "mem[42] = 100\n" +
            "mask = 00000000000000000000000000000000X0XX\n" +
            "mem[26] = 1";

    private static long maxNum = 0;
    private static long xMask = 0;
    private static long one = 0;

    public static void main(String[] args) {
        // int j = 11;

        // zero = ~(1 << 1); // 11111101
        // one = 1 << 6;     // 01000000

        // System.out.println(((j & zero) | one));

        Map<Long, Long> mem = new HashMap<>();
        for (String line : INPUT.split("\n")) {
            if (line.startsWith("mask")) {
                parseMask(line);
            } else {
                String[] parts = line.split(" ");
                long origPos = Long.parseLong(parts[0].substring(4, parts[0].length()-1));
                long val = Long.parseLong(parts[2]);
                for (long num = 0; num <= maxNum; num++) {
                    long pos = origPos | one;
                    long newNum = getNewNum(num);
                    pos = (pos & ~(xMask & ~newNum)) | (xMask & newNum);
                    mem.put(pos, val);
                }
//                mem.put(pos, ((val & zero) | one));
            }
        }
        System.out.println(mem.values().stream().mapToLong(i -> i).sum());
    }

    private static long getNewNum(long num) {
        long newNum = 0;
        int j = 0;
        for (int i = 0; i < 64; i++) {
            long m = xMask >> i;
            if ((m & 1L) == 1) {
                long m2 = num >> j;
                if ((m2 & 1L) == 1) {
                    newNum = newNum | (1L << i);
                }
                j++;
            }
        }
        return newNum;
    }

    private static void parseMask(String mask) {
        String[] parts = mask.split(" ");
        char[] chars = StringUtils.reverse(parts[2]).toCharArray();
        one = 0;
        xMask = 0;
        int maxPos = 0;
        int xCnt = 0;
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == '1') {
                one = one | (1L << i);
            } else if (chars[i] == 'X') {
                xMask = xMask | (1L << i);
                maxPos = i;
                xCnt++;
            }
        }
        maxNum = 0;
        for (int i = 0; i <= xCnt; i++) {
            maxNum = maxNum | (1L << i);
        }
        System.out.println(String.format("xCount=%s, maxPos=%s, maxNum=%s", xCnt, maxPos, maxNum));
        // val  = 00110010001
        // mask = 01100000000
        // num  = 01011111000
        // res  = 01110010001
        // mask & num  = 01000000000
        // mask & ~num = 00100000000
        // res = (val & ~(mask & ~num)) | (mask & num)
    }
}
